// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @db.Uuid @default(uuid())
  email String
  name String
  password String
  groups Group[]
  sentMessages Sender[]
  receivedMessages Recipient[]
  channels Channel[]
}

model Group{
  id String @id @db.Uuid @default(uuid())
  name String 
  members User[]
}

model Message{
  id String @id @db.Uuid @default(uuid())
  content String
  channels Channel[]
  sender Sender?
  recipients Recipient[]
  receipt MessageReceipt @default(DELIEVERED)
  createAt DateTime @default(now())
}

model Recipient{
  id String @id @db.Uuid @default(uuid())
  isRead Boolean @default(false)
  isDeleted Boolean @default(false)
  userId String @db.Uuid
  user User @relation(fields: [userId], references: [id])
  messageId String @db.Uuid
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sender{
  id String @id @db.Uuid @default(uuid())
  userId String @db.Uuid
  messageId String @db.Uuid @unique
  message Message @relation(fields: [messageId], references: [id])
  user User @relation(fields: [userId], references: [id])
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id String @id @default(uuid())
  name String @db.Text
  createdBy String @db.Uuid
  type ChannelType
  isActive  Boolean @default(true)
  members User[]
  message Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MessageReceipt {
  DELIEVERED
  READ
  SEEN
}

enum ChannelType {
  GROUP
  ONE_TO_ONE
}